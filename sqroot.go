// Package sqroot calculates square roots to arbitrary precision.
package sqroot

import (
	"fmt"
	"io"
	"math/big"
	"os"
	"strconv"
	"strings"

	"github.com/keep94/consume2"
)

const (
	fPrecision = 6
	gPrecision = 16
)

var (
	oneHundred = big.NewInt(100)
	two        = big.NewInt(2)
	one        = big.NewInt(1)
	ten        = big.NewInt(10)
)

// Option represents an option for the Print, Fprint, and Sprint methods of
// Mantissa.
type Option interface {
	mutate(p *printerSettings)
}

// DigitsPerRow sets the number of digits per row. The default is
// zero, which means no separate rows.
func DigitsPerRow(count int) Option {
	return optionFunc(func(p *printerSettings) {
		p.digitsPerRow = count
	})
}

// DigitsPerColumn sets the number of digits per column. The default is
// zero, which means no separate columns.
func DigitsPerColumn(count int) Option {
	return optionFunc(func(p *printerSettings) {
		p.digitsPerColumn = count
	})
}

// ShowCount shows the digit count in the left margin if on is true. The
// default is false.
func ShowCount(on bool) Option {
	return optionFunc(func(p *printerSettings) {
		p.showCount = on
	})
}

// Mantissa represents the mantissa of a square root. Non zero Mantissas are
// between 0.1 inclusive and 1.0 exclusive. The number of digits of a
// Mantissa can be infinite. The zero value for a Mantissa corresponds to 0.
type Mantissa struct {
	generator func(consumer consume2.Consumer[int])
}

// Format prints this Mantissa with the f, F, g, G, e, E verbs. The verbs work
// in the usual way except that they always round down. Because Mantissas can
// have an infinite number of digits, g with no precision shows a max of 16
// significant digits. Format supports width, precision, and the '-' flag
// for left justification. The v verb is an alias for g.
func (m Mantissa) Format(state fmt.State, verb rune) {
	formatSpec, ok := newFormatSpec(state, verb, 0)
	if !ok {
		fmt.Fprintf(state, "%%!%c(mantissa=%s)", verb, m.String())
		return
	}
	formatSpec.PrintField(state, m, 0)
}

// String returns the decimal representation of m as generated by m.Sprint(16).
func (m Mantissa) String() string {
	return m.Sprint(gPrecision)
}

// Send sends the digits to the right of decimal point of this Mantissa
// to consumer. If this Mantissa is zero, Send sends no digits
// to consumer.
func (m Mantissa) Send(consumer consume2.Consumer[int]) {
	if m.generator != nil {
		m.generator(consumer)
	}
}

// Print prints this Mantissa to stdout. Print returns the number of bytes
// written and any error encountered.
func (m Mantissa) Print(maxDigits int, options ...Option) (n int, err error) {
	return m.Fprint(os.Stdout, maxDigits, options...)
}

// Sprint prints this Mantissa to a string.
func (m Mantissa) Sprint(maxDigits int, options ...Option) string {
	var builder strings.Builder
	m.Fprint(&builder, maxDigits, options...)
	return builder.String()
}

// Fprint prints this Mantissa to w. Fprint returns the number of bytes
// written and any error encountered.
func (m Mantissa) Fprint(w io.Writer, maxDigits int, options ...Option) (
	n int, err error) {
	if m.generator == nil {
		return fmt.Fprint(w, "0")
	}
	p := newPrinter(w, maxDigits, options)
	m.Send(p)
	return p.byteCount, p.err
}

// Number represents a square root value. The zero value for Number
// corresponds to 0. A Number is of the form mantissa * 10^exponent where
// mantissa is between 0.1 inclusive and 1.0 exclusive. Like Mantissa, a
// Number instance can represent an infinite number of digits.
type Number struct {
	mantissa Mantissa
	exponent int
}

// Mantissa returns the Mantissa of this Number.
func (n Number) Mantissa() Mantissa {
	return n.mantissa
}

// Exponent returns the exponent of this Number.
func (n Number) Exponent() int {
	return n.exponent
}

// Format prints this Number with the f, F, g, G, e, E verbs. The verbs work
// in the usual way except that they always round down. Because Number can
// have an infinite number of digits, g with no precision shows a max of 16
// significant digits. Format supports width, precision, and the '-' flag
// for left justification. The v verb is an alias for g.
func (n Number) Format(state fmt.State, verb rune) {
	formatSpec, ok := newFormatSpec(state, verb, n.exponent)
	if !ok {
		fmt.Fprintf(state, "%%!%c(number=%s)", verb, n.String())
		return
	}
	formatSpec.PrintField(state, n.mantissa, n.exponent)
}

// String returns the decimal representation of n using %g.
func (n Number) String() string {
	var builder strings.Builder
	fs := formatSpec{sigDigits: gPrecision, sci: bigExponent(n.exponent)}
	fs.PrintNumber(&builder, n.mantissa, n.exponent)
	return builder.String()
}

// SquareRoot returns the square root of radican * 10^rexp.
func SquareRoot(radican *big.Int, rexp int) Number {
	if radican.Sign() < 0 {
		panic("radican must be non-negative")
	}
	if radican.Sign() == 0 {
		return Number{}
	}
	if rexp%2 != 0 {
		radican = new(big.Int).Mul(radican, ten)
		rexp--
	}
	radicanDigits, doubleZeroCount := base100(radican)
	exp := len(radicanDigits) + doubleZeroCount + rexp/2
	generator := func(consumer consume2.Consumer[int]) {
		squareRoot(radicanDigits, consumer)
	}
	return Number{exponent: exp, mantissa: Mantissa{generator: generator}}
}

type printer struct {
	writer          io.Writer
	maxDigits       int
	indentation     string
	digitCountSpec  string
	digitsPerRow    int
	digitsPerColumn int
	index           int
	indexInRow      int
	byteCount       int
	err             error
}

func newPrinter(
	writer io.Writer, maxDigits int, options []Option) *printer {
	settings := &printerSettings{}
	for _, option := range options {
		option.mutate(settings)
	}
	indentation, digitCountSpec := computeIndentation(
		settings.digitCountWidth(maxDigits))
	return &printer{
		writer:          writer,
		maxDigits:       maxDigits,
		indentation:     indentation,
		digitCountSpec:  digitCountSpec,
		digitsPerRow:    settings.digitsPerRow,
		digitsPerColumn: settings.digitsPerColumn,
	}
}

func (p *printer) CanConsume() bool {
	return p.err == nil && p.index < p.maxDigits
}

func (p *printer) Consume(digit int) {
	if !p.CanConsume() {
		return
	}
	if p.index == 0 {
		n, err := fmt.Fprintf(p.writer, "%s0.", p.indentation)
		if !p.updateByteCount(n, err) {
			return
		}
	} else if p.digitsPerRow > 0 && p.index%p.digitsPerRow == 0 {
		n, err := fmt.Fprintln(p.writer)
		if !p.updateByteCount(n, err) {
			return
		}
		if p.digitCountSpec != "" {
			n, err := fmt.Fprintf(p.writer, p.digitCountSpec, p.index)
			if !p.updateByteCount(n, err) {
				return
			}
		}
		n, err = fmt.Fprint(p.writer, "  ")
		if !p.updateByteCount(n, err) {
			return
		}
		p.indexInRow = 0
	} else if p.digitsPerColumn > 0 && p.indexInRow%p.digitsPerColumn == 0 {
		n, err := fmt.Fprint(p.writer, " ")
		if !p.updateByteCount(n, err) {
			return
		}
	}
	n, err := fmt.Fprint(p.writer, digit)
	if !p.updateByteCount(n, err) {
		return
	}
	p.index++
	p.indexInRow++
}

func (p *printer) updateByteCount(n int, err error) bool {
	p.byteCount += n
	p.err = err
	return err == nil
}

type formatSpec struct {
	sigDigits       int
	exactDigitCount bool
	sci             bool
	capital         bool
}

func newFormatSpec(state fmt.State, verb rune, exponent int) (
	formatSpec, bool) {
	precision, precisionOk := state.Precision()
	var sigDigits int
	var exactDigitCount bool
	var sci bool
	switch verb {
	case 'f', 'F':
		if !precisionOk {
			precision = fPrecision
		}
		sigDigits = precision + exponent
		exactDigitCount = true
		sci = false
	case 'g', 'G', 'v':
		if !precisionOk {
			precision = gPrecision
		}
		sigDigits = precision
		if sigDigits == 0 {
			sigDigits = 1
		}
		exactDigitCount = false
		sci = sigDigits < exponent || bigExponent(exponent)
	case 'e', 'E':
		if !precisionOk {
			precision = fPrecision
		}
		sigDigits = precision
		exactDigitCount = true
		sci = true
	default:
		return formatSpec{}, false
	}
	capital := verb == 'E' || verb == 'G'
	return formatSpec{
		sigDigits:       sigDigits,
		exactDigitCount: exactDigitCount,
		sci:             sci,
		capital:         capital}, true
}

func (f formatSpec) PrintField(state fmt.State, m Mantissa, exponent int) {
	width, widthOk := state.Width()
	if !widthOk {
		f.PrintNumber(state, m, exponent)
		return
	}
	var builder strings.Builder
	f.PrintNumber(&builder, m, exponent)
	field := builder.String()
	if !state.Flag('-') && len(field) < width {
		fmt.Fprint(state, strings.Repeat(" ", width-len(field)))
	}
	fmt.Fprint(state, field)
	if state.Flag('-') && len(field) < width {
		fmt.Fprint(state, strings.Repeat(" ", width-len(field)))
	}
}

func (f formatSpec) PrintNumber(w io.Writer, m Mantissa, exponent int) {
	if f.sci {
		sep := "e"
		if f.capital {
			sep = "E"
		}
		f.printSci(w, m, exponent, sep)
	} else {
		f.printFixed(w, m, exponent)
	}
}

func (f formatSpec) printFixed(w io.Writer, m Mantissa, exponent int) {
	formatter := newFormatter(w, f.sigDigits, exponent, f.exactDigitCount)
	m.Send(formatter)
	formatter.Finish()
}

func (f formatSpec) printSci(
	w io.Writer, m Mantissa, exponent int, sep string) {
	f.printFixed(w, m, 0)
	fmt.Fprint(w, sep)
	fmt.Fprintf(w, "%+03d", exponent)
}

type formatter struct {
	writer          io.Writer
	sigDigits       int // invariant sigDigits >= exponent
	exponent        int
	exactDigitCount bool
	index           int
}

func newFormatter(
	w io.Writer, sigDigits, exponent int, exactDigitCount bool) *formatter {
	if sigDigits < exponent {
		panic("sigDigits must be >= exponent")
	}
	return &formatter{
		writer:          w,
		sigDigits:       sigDigits,
		exponent:        exponent,
		exactDigitCount: exactDigitCount,
	}
}

func (f *formatter) CanConsume() bool {
	return f.index < f.sigDigits
}

func (f *formatter) Consume(digit int) {
	if !f.CanConsume() {
		return
	}
	f.add(digit)
}

func (f *formatter) Finish() {
	maxDigits := f.sigDigits
	if !f.exactDigitCount {
		maxDigits = f.exponent
	}
	for f.index < maxDigits {
		f.add(0)
	}
	// If we haven't written anything yet
	if f.index == 0 {
		count := -f.exponent
		if f.exactDigitCount {
			count = f.sigDigits - f.exponent
		}
		f.addLeadingZeros(count)
	}
}

func (f *formatter) add(digit int) {
	if f.index == 0 && f.exponent <= 0 {
		f.addLeadingZeros(-f.exponent)
	}
	if f.index == f.exponent {
		fmt.Fprint(f.writer, ".")
	}
	fmt.Fprint(f.writer, digit)
	f.index++
}

func (f *formatter) addLeadingZeros(count int) {
	fmt.Fprint(f.writer, "0")
	if count <= 0 {
		return
	}
	fmt.Fprint(f.writer, ".")
	fmt.Fprint(f.writer, strings.Repeat("0", count))
}

func squareRoot(radicanDigits []*big.Int, consumer consume2.Consumer[int]) {
	radicanDigitsIdx := len(radicanDigits)
	incr := big.NewInt(1)
	remainder := big.NewInt(0)
	for consumer.CanConsume() {
		if radicanDigitsIdx == 0 && remainder.Sign() == 0 {
			return
		}
		remainder.Mul(remainder, oneHundred)
		if radicanDigitsIdx > 0 {
			radicanDigitsIdx--
			remainder.Add(remainder, radicanDigits[radicanDigitsIdx])
		}
		digit := 0
		for remainder.Cmp(incr) >= 0 {
			remainder.Sub(remainder, incr)
			digit++
			incr.Add(incr, two)
		}
		consumer.Consume(digit)
		incr.Sub(incr, one).Mul(incr, ten).Add(incr, one)
	}
}

func base100(radican *big.Int) (result []*big.Int, doubleZeroCount int) {
	radican = new(big.Int).Set(radican)
	trailingZeros := true
	for radican.Sign() > 0 {
		_, m := radican.DivMod(radican, oneHundred, new(big.Int))
		if trailingZeros && m.Sign() == 0 {
			doubleZeroCount++
		} else {
			result = append(result, m)
			trailingZeros = false
		}
	}
	return
}

type optionFunc func(p *printerSettings)

func (o optionFunc) mutate(p *printerSettings) {
	o(p)
}

type printerSettings struct {
	digitsPerRow    int
	digitsPerColumn int
	showCount       bool
}

func (p *printerSettings) digitCountWidth(maxDigits int) int {
	if !p.showCount || p.digitsPerRow <= 0 {
		return 0
	}
	if maxDigits <= p.digitsPerRow {
		return 0
	}
	maxCounter := ((maxDigits - 1) / p.digitsPerRow) * p.digitsPerRow
	return len(strconv.Itoa(maxCounter))
}

func computeIndentation(width int) (
	indentation string, digitCountSpec string) {
	if width <= 0 {
		return
	}
	indentation = strings.Repeat(" ", width)
	digitCountSpec = fmt.Sprintf("%%%dd", width)
	return
}

func bigExponent(exponent int) bool {
	return exponent < -3 || exponent > 6
}
