// Package sqroot calculates square roots to arbitrary precision.
package sqroot

import (
	"fmt"
	"io"
	"math/big"
	"os"
	"strings"

	"github.com/keep94/consume2"
)

const (
	fPrecision = 6
	gPrecision = 16
)

// Option represents an option for the Print, Fprint, and Sprint methods of
// Mantissa.
type Option interface {
	mutate(p *printerSettings)
}

// DigitsPerRow sets the number of digits per row. The default is
// zero, which means no separate rows.
func DigitsPerRow(count int) Option {
	return optionFunc(func(p *printerSettings) {
		p.digitsPerRow = count
	})
}

// DigitsPerColumn sets the number of digits per column. The default is
// zero, which means no separate columns.
func DigitsPerColumn(count int) Option {
	return optionFunc(func(p *printerSettings) {
		p.digitsPerColumn = count
	})
}

// ShowCount shows the digit count in the left margin if on is true. The
// default is false.
func ShowCount(on bool) Option {
	return optionFunc(func(p *printerSettings) {
		p.showCount = on
	})
}

// Mantissa represents the mantissa of a square root. Non zero Mantissas are
// between 0.1 inclusive and 1.0 exclusive. The number of digits of a
// Mantissa can be infinite. The zero value for a Mantissa corresponds to 0.
type Mantissa struct {
	spec mantissaSpec
}

// Format prints this Mantissa with the f, F, g, G, e, E verbs. The verbs work
// in the usual way except that they always round down. Because Mantissas can
// have an infinite number of digits, g with no precision shows a max of 16
// significant digits. Format supports width, precision, and the '-' flag
// for left justification. The v verb is an alias for g.
func (m Mantissa) Format(state fmt.State, verb rune) {
	formatSpec, ok := newFormatSpec(state, verb, 0)
	if !ok {
		fmt.Fprintf(state, "%%!%c(mantissa=%s)", verb, m.String())
		return
	}
	formatSpec.PrintField(state, m, 0)
}

// String returns the decimal representation of m as generated by m.Sprint(16).
func (m Mantissa) String() string {
	return m.Sprint(gPrecision)
}

// Send sends the digits to the right of decimal point of this Mantissa
// to consumer. If this Mantissa is zero, Send sends no digits
// to consumer.
func (m Mantissa) Send(consumer consume2.Consumer[int]) {
	iter := m.Iterator()
	for consumer.CanConsume() {
		digit := iter()
		if digit == -1 {
			return
		}
		consumer.Consume(digit)
	}
}

// Iterator returns the digits of this Mantissa as a function. The
// first call to returned function returns the first digit of Mantissa;
// the second call returns the second digit and so forth. If returned
// function runs out of Mantissa digits, it returns -1. If this
// Mantissa is zero, the returned function always returns -1.
func (m Mantissa) Iterator() func() int {
	if m.spec == nil {
		return func() int { return -1 }
	}
	return m.spec.Iterator()
}

// Print prints this Mantissa to stdout. Print returns the number of bytes
// written and any error encountered.
func (m Mantissa) Print(maxDigits int, options ...Option) (n int, err error) {
	return m.Fprint(os.Stdout, maxDigits, options...)
}

// Sprint prints this Mantissa to a string.
func (m Mantissa) Sprint(maxDigits int, options ...Option) string {
	var builder strings.Builder
	m.Fprint(&builder, maxDigits, options...)
	return builder.String()
}

// Fprint prints this Mantissa to w. Fprint returns the number of bytes
// written and any error encountered.
func (m Mantissa) Fprint(w io.Writer, maxDigits int, options ...Option) (
	n int, err error) {
	if m.spec == nil || maxDigits <= 0 {
		return fmt.Fprint(w, "0")
	}
	settings := &printerSettings{}
	for _, option := range options {
		option.mutate(settings)
	}
	p := newPrinter(w, maxDigits, settings)
	m.Send(p)
	return p.byteCount, p.err
}

// Find returns a function that returns the next zero based index of the
// match for pattern in this Mantissa. If this mantissa has a finite number
// of digits and there are no more matches for pattern, the returned function
// returns -1.
func (m Mantissa) Find(pattern []int) func() int {
	if len(pattern) == 0 {
		return zeroPattern(m.Iterator())
	}
	return kmp(m.Iterator(), pattern)
}

// FindFirst finds the zero based index of the first match of pattern in
// this Mantissa. FindFirst returns -1 if pattern is not found only if this
// Mantissa has a finite number of digits. If this Mantissa has an infinite
// number of digits and pattern is not found, FindFirst will run forever.
// pattern is a sequence of digits between 0 and 9.
func (m Mantissa) FindFirst(pattern []int) int {
	iter := m.Find(pattern)
	return iter()
}

// FindFirstN works like FindFirst but it finds the first n matches and
// returns the zero based index of each match. If this Mantissa has a finite
// number of digits, FindFirstN may return fewer than n matches.
// Like FindFirst, FindFirstN may run forever if this Mantissa has an infinite
// number of digits, and there are not n matches available.
// pattern is a sequence of digits between 0 and 9.
func (m Mantissa) FindFirstN(pattern []int, n int) []int {
	result := make([]int, 0, n)
	m.FindAll(pattern, consume2.Slice(consume2.AppendTo(&result), 0, n))
	return result
}

// FindAll finds all the matches of pattern in this Mantissa. The zero based
// index of the matches are emitted to indexSink.
// pattern is a sequence of digits between 0 and 9.
func (m Mantissa) FindAll(pattern []int, indexSink consume2.Consumer[int]) {
	iter := m.Find(pattern)
	for indexSink.CanConsume() {
		index := iter()
		if index == -1 {
			return
		}
		indexSink.Consume(index)
	}
}

// Number represents a square root value. The zero value for Number
// corresponds to 0. A Number is of the form mantissa * 10^exponent where
// mantissa is between 0.1 inclusive and 1.0 exclusive. Like Mantissa, a
// Number instance can represent an infinite number of digits.
type Number struct {
	mantissa Mantissa
	exponent int
}

// Mantissa returns the Mantissa of this Number.
func (n Number) Mantissa() Mantissa {
	return n.mantissa
}

// Exponent returns the exponent of this Number.
func (n Number) Exponent() int {
	return n.exponent
}

// Format prints this Number with the f, F, g, G, e, E verbs. The verbs work
// in the usual way except that they always round down. Because Number can
// have an infinite number of digits, g with no precision shows a max of 16
// significant digits. Format supports width, precision, and the '-' flag
// for left justification. The v verb is an alias for g.
func (n Number) Format(state fmt.State, verb rune) {
	formatSpec, ok := newFormatSpec(state, verb, n.exponent)
	if !ok {
		fmt.Fprintf(state, "%%!%c(number=%s)", verb, n.String())
		return
	}
	formatSpec.PrintField(state, n.mantissa, n.exponent)
}

// String returns the decimal representation of n using %g.
func (n Number) String() string {
	var builder strings.Builder
	fs := formatSpec{sigDigits: gPrecision, sci: bigExponent(n.exponent)}
	fs.PrintNumber(&builder, n.mantissa, n.exponent)
	return builder.String()
}

// Sqrt returns the square root of radican. Sqrt panics if radican is
// negative.
func Sqrt(radican int64) Number {
	return sqrtFrac(big.NewInt(radican), one)
}

// SqrtRat returns the square root of num / denom. denom must be positive,
// and num must be non-negative or else SqrtRat panics.
func SqrtRat(num, denom int64) Number {
	return sqrtFrac(big.NewInt(num), big.NewInt(denom))
}

// SqrtBigInt returns the square root of radican. SqrtBigInt panics if
// radican is negative.
func SqrtBigInt(radican *big.Int) Number {
	return sqrtFrac(radican, one)
}

// SqrtBigRat returns the square root of radican. The denominator of radican
// must be positive, and the numerator must be non-negative or else SqrtBigRat
// panics.
func SqrtBigRat(radican *big.Rat) Number {
	return sqrtFrac(radican.Num(), radican.Denom())
}

func sqrtFrac(num, denom *big.Int) Number {
	num = new(big.Int).Set(num)
	denom = new(big.Int).Set(denom)
	if denom.Sign() <= 0 {
		panic("Denominator must be positive")
	}
	if num.Sign() < 0 {
		panic("Numerator must be non-negative")
	}
	if num.Sign() == 0 {
		return Number{}
	}
	exp := 0
	for num.Cmp(denom) < 0 {
		exp--
		num.Mul(num, oneHundred)
	}
	if exp < 0 {
		exp++
		num.Div(num, oneHundred)
	}
	for num.Cmp(denom) >= 0 {
		exp++
		denom.Mul(denom, oneHundred)
	}
	spec := &sqrtSpec{}
	spec.num.Set(num)
	spec.denom.Set(denom)
	return Number{exponent: exp, mantissa: Mantissa{spec: spec}}
}

type formatSpec struct {
	sigDigits       int
	exactDigitCount bool
	sci             bool
	capital         bool
}

func newFormatSpec(state fmt.State, verb rune, exponent int) (
	formatSpec, bool) {
	precision, precisionOk := state.Precision()
	var sigDigits int
	var exactDigitCount bool
	var sci bool
	switch verb {
	case 'f', 'F':
		if !precisionOk {
			precision = fPrecision
		}
		sigDigits = precision + exponent
		exactDigitCount = true
		sci = false
	case 'g', 'G', 'v':
		if !precisionOk {
			precision = gPrecision
		}
		sigDigits = precision
		if sigDigits == 0 {
			sigDigits = 1
		}
		exactDigitCount = false
		sci = sigDigits < exponent || bigExponent(exponent)
	case 'e', 'E':
		if !precisionOk {
			precision = fPrecision
		}
		sigDigits = precision
		exactDigitCount = true
		sci = true
	default:
		return formatSpec{}, false
	}
	capital := verb == 'E' || verb == 'G'
	return formatSpec{
		sigDigits:       sigDigits,
		exactDigitCount: exactDigitCount,
		sci:             sci,
		capital:         capital}, true
}

func (f formatSpec) PrintField(state fmt.State, m Mantissa, exponent int) {
	width, widthOk := state.Width()
	if !widthOk {
		f.PrintNumber(state, m, exponent)
		return
	}
	var builder strings.Builder
	f.PrintNumber(&builder, m, exponent)
	field := builder.String()
	if !state.Flag('-') && len(field) < width {
		fmt.Fprint(state, strings.Repeat(" ", width-len(field)))
	}
	fmt.Fprint(state, field)
	if state.Flag('-') && len(field) < width {
		fmt.Fprint(state, strings.Repeat(" ", width-len(field)))
	}
}

func (f formatSpec) PrintNumber(w io.Writer, m Mantissa, exponent int) {
	if f.sci {
		sep := "e"
		if f.capital {
			sep = "E"
		}
		f.printSci(w, m, exponent, sep)
	} else {
		f.printFixed(w, m, exponent)
	}
}

func (f formatSpec) printFixed(w io.Writer, m Mantissa, exponent int) {
	formatter := newFormatter(w, f.sigDigits, exponent, f.exactDigitCount)
	m.Send(formatter)
	formatter.Finish()
}

func (f formatSpec) printSci(
	w io.Writer, m Mantissa, exponent int, sep string) {
	f.printFixed(w, m, 0)
	fmt.Fprint(w, sep)
	fmt.Fprintf(w, "%+03d", exponent)
}

type optionFunc func(p *printerSettings)

func (o optionFunc) mutate(p *printerSettings) {
	o(p)
}

func bigExponent(exponent int) bool {
	return exponent < -3 || exponent > 6
}
