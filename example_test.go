package sqroot_test

import (
	"fmt"
	"math/big"

	"github.com/keep94/consume2"
	"github.com/keep94/sqroot"
)

func ExampleSqrt() {
	var mantissaDigits []int

	// Find the square root of 1000 / 3 which is 18.25741858...
	n := sqroot.Sqrt(big.NewRat(1000, 3))

	n.Mantissa().Send(consume2.Slice(consume2.AppendTo(&mantissaDigits), 0, 10))
	fmt.Println(mantissaDigits)
	fmt.Println(n.Exponent())
	// Output:
	// [1 8 2 5 7 4 1 8 5 8]
	// 2
}

func ExampleSqrt_format() {
	// Print the square root of 5050.5 with 50 significant digits.
	fmt.Printf("%.50g", sqroot.Sqrt(big.NewRat(10101, 2)))
	// Output:
	// 71.066869918408535463450359603433796752662170140402
}

func ExampleMantissa_Print() {

	// Find the square root of 2.
	n := sqroot.Sqrt(big.NewRat(2, 1))

	fmt.Printf("10^%d *\n", n.Exponent())
	n.Mantissa().Print(
		1000,
		sqroot.DigitsPerRow(50),
		sqroot.DigitsPerColumn(5),
		sqroot.ShowCount(true))
	// Output:
	// 10^1 *
	//    0.14142 13562 37309 50488 01688 72420 96980 78569 67187 53769
	//  50  48073 17667 97379 90732 47846 21070 38850 38753 43276 41572
	// 100  73501 38462 30912 29702 49248 36055 85073 72126 44121 49709
	// 150  99358 31413 22266 59275 05592 75579 99505 01152 78206 05714
	// 200  70109 55997 16059 70274 53459 68620 14728 51741 86408 89198
	// 250  60955 23292 30484 30871 43214 50839 76260 36279 95251 40798
	// 300  96872 53396 54633 18088 29640 62061 52583 52395 05474 57502
	// 350  87759 96172 98355 75220 33753 18570 11354 37460 34084 98847
	// 400  16038 68999 70699 00481 50305 44027 79031 64542 47823 06849
	// 450  29369 18621 58057 84631 11596 66871 30130 15618 56898 72372
	// 500  35288 50926 48612 49497 71542 18334 20428 56860 60146 82472
	// 550  07714 35854 87415 56570 69677 65372 02264 85447 01585 88016
	// 600  20758 47492 26572 26002 08558 44665 21458 39889 39443 70926
	// 650  59180 03113 88246 46815 70826 30100 59485 87040 03186 48034
	// 700  21948 97278 29064 10450 72636 88131 37398 55256 11732 20402
	// 750  45091 22770 02269 41127 57362 72804 95738 10896 75040 18369
	// 800  86836 84507 25799 36472 90607 62996 94138 04756 54823 72899
	// 850  71803 26802 47442 06292 69124 85905 21810 04459 84215 05911
	// 900  20249 44134 17285 31478 10580 36033 71077 30918 28693 14710
	// 950  17111 16839 16581 72688 94197 58716 58215 21282 29518 48847
}

func ExampleMantissa_FindFirst() {
	n := sqroot.Sqrt(big.NewRat(3, 1))

	// sqrt(3) = 1.732050807... so returned index is 4
	index := n.Mantissa().FindFirst([]int{0, 5, 0, 8})

	fmt.Println(index)
	// Output:
	// 4
}
